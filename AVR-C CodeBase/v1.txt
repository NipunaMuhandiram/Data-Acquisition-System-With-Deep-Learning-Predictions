#define F_CPU 8000000UL  // 8 MHz internal oscillator
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1  // Baud rate calculation

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>  // For itoa (integer to ASCII conversion)

void uart_init(unsigned int ubrr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
	UBRR0L = (unsigned char)ubrr;

	// Enable receiver and transmitter
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);

	// Set frame format: 8 data bits, 1 stop bit
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void uart_transmit(unsigned char data) {
	// Wait for empty transmit buffer
	while (!(UCSR0A & (1 << UDRE0)));

	// Put data into buffer, sends the data
	UDR0 = data;
}

void uart_send_string(const char *str) {
	while (*str) {
		uart_transmit(*str++);
	}
}

void adc_init(void) {
	// Set the ADC reference to AVcc (5V) and select ADC0 (PC0)
	ADMUX = (1 << REFS0);  // AVcc as reference, ADC0 as input

	// Enable the ADC, set the prescaler to 64 for 125kHz ADC clock at 8 MHz CPU
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
}

uint16_t adc_read(void) {
	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);

	// Wait for the conversion to complete
	while (ADCSRA & (1 << ADSC));

	// Return the ADC value (10-bit result)
	return ADC;
}

int main(void) {
	// Initialize UART with the calculated UBRR value for 8 MHz
	uart_init(MYUBRR);

	// Initialize ADC
	adc_init();

	// Buffer to store ADC value as a string
	char buffer[10];

	uart_send_string("LDR Reading Initialized!\r\n");

	while (1) {
		// Read the analog value from ADC0 (PC0)
		uint16_t ldr_value = adc_read();

		// Convert the ADC value to a string
		itoa(ldr_value, buffer, 10);

		// Send the ADC value over UART
		uart_send_string("LDR Value: ");
		uart_send_string(buffer);
		uart_send_string("\r\n");

		// Delay between readings
		_delay_ms(1000);
	}
}

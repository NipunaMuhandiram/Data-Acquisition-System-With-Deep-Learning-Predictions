#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP280.h>
#include <Wire.h>

// Create sensor objects
Adafruit_MPU6050 mpu;
Adafruit_BMP280 bmp; // Use I2C for BMP280

// Pin definitions
const int ldrPin = A0;
const int vibrationPin = A1;
const int ledPins[] = {3, 4, 5, 6, 7}; // LED pins

void setup(void) {
    Serial.begin(9600);

    // Initialize MPU6050
    if (!mpu.begin()) {
        Serial.println("Failed to find MPU6050 chip");
        while (1) {
            delay(10);
        }
    }

    // Set accelerometer range to +-8G
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);

    // Set gyro range to +- 500 deg/s
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);

    // Set filter bandwidth to 21 Hz
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

    // Initialize BMP280
    if (!bmp.begin(0x76)) { // Address might be 0x76 or 0x77
        Serial.println("Failed to find BMP280 chip");
        while (1) {
            delay(10);
        }
    }

    // Configure BMP280
    bmp.setSampling(Adafruit_BMP280::MODE_NORMAL,
                    Adafruit_BMP280::SAMPLING_X2,   // Temperature oversampling
                    Adafruit_BMP280::SAMPLING_X16,  // Pressure oversampling
                    Adafruit_BMP280::FILTER_X16,    // Filtering
                    Adafruit_BMP280::STANDBY_MS_500); // Standby time

    // Initialize LED pins as output
    for (int i = 0; i < 5; i++) {
        pinMode(ledPins[i], OUTPUT);
        digitalWrite(ledPins[i], LOW); // Turn off LEDs initially
    }
}

void loop() {
    // Handle serial commands
    if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim(); // Remove any trailing newline or spaces

        // Parse and execute commands
        if (command.startsWith("ACTIVATE_PD")) {
            int pin = command.substring(11).toInt(); // Extract pin number
            if (pin >= 3 && pin <= 7) {
                digitalWrite(pin, HIGH);
                Serial.print("Activated pin ");
                Serial.println(pin);
            } else {
                Serial.println("Invalid pin for activation");
            }
        } else if (command.startsWith("DEACTIVATE_PD")) {
            int pin = command.substring(13).toInt(); // Extract pin number
            if (pin >= 3 && pin <= 7) {
                digitalWrite(pin, LOW);
                Serial.print("Deactivated pin ");
                Serial.println(pin);
            } else {
                Serial.println("Invalid pin for deactivation");
            }
        } else {
            Serial.println("Unknown command");
        }
    }

    // Get MPU6050 readings
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);

    // Get BMP280 readings
    float temperature = bmp.readTemperature();
    float pressure = bmp.readPressure();
    float altitude = bmp.readAltitude(1013.25); // Adjust sea level pressure as needed

    // Get LDR and Vibration sensor readings
    int ldrValue = analogRead(ldrPin);
    int vibrationValue = analogRead(vibrationPin);

    // Print MPU6050 data
    Serial.print(a.acceleration.x);
    Serial.print(",");
    Serial.print(a.acceleration.y);
    Serial.print(",");
    Serial.print(a.acceleration.z);
    Serial.print(", ");
    Serial.print(g.gyro.x);
    Serial.print(",");
    Serial.print(g.gyro.y);
    Serial.print(",");
    Serial.print(g.gyro.z);

    // Print BMP280 data
    Serial.print(", ");
    Serial.print(temperature);
    Serial.print(", ");
    Serial.print(pressure);
    Serial.print(", ");
    Serial.print(altitude);

    // Print LDR and Vibration sensor data
    Serial.print(", ");
    Serial.print(ldrValue);
    Serial.print(", ");
    Serial.println(vibrationValue);

    delay(10);
}
